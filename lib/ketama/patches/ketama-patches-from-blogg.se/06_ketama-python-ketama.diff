diff -uN python-ketama/ketamamodule.c ketama-dev-toxik/python-ketama/ketamamodule.c
--- python-ketama/ketamamodule.c	1970-01-01 01:00:00.000000000 +0100
+++ ketama-dev-toxik/python-ketama/ketamamodule.c	2007-08-03 14:42:09.000000000 +0200
@@ -0,0 +1,148 @@
+/**
+ * $Id: ketamamodule.c 22 2007-07-13 01:31:27Z toxik $
+ *
+ * ketama Python module.
+ *
+ * Definitions of C-level API calls to libketama
+ *
+ * libketama defines:
+ * ketama_roll: initialize server list and return a continuum
+ * ketama_destroy: free memory used by continuum
+ * ketama_get_server: hash key up and return server to use from continuum
+ * ketama_print_continuum: print out continuum
+ * ketama_error: return current error string
+ */
+
+#include "ketamamodule.h"
+
+/* {{{ Continuum type definition */
+
+static void pyketama_Continuum_dealloc(pyketama_Continuum *self) {
+    ketama_smoke(self->cont);
+    free(self->filename);
+    self->ob_type->tp_free((PyObject *)self);
+}
+
+PyObject *pyketama_Continuum_new(PyTypeObject *type,
+        PyObject *args, PyObject *kwds) {
+    /* Investigate: This seems like dull boiler-plate code. Needed? */
+    pyketama_Continuum *pkc = (pyketama_Continuum *)type->tp_alloc(type, 0);
+
+    /* Assures that a free() on uninitialized filename will not die. */
+    pkc->filename = NULL;
+
+    return (PyObject *)pkc;
+}
+
+static int pyketama_Continuum_init(PyObject *self, PyObject *args,
+        PyObject *kwds) {
+    char *filename;
+    pyketama_Continuum *pkc = (pyketama_Continuum *)self;
+
+    if (!PyArg_ParseTuple(args, "s", &filename)) {
+        return -1;
+    }
+
+    /* libketama doesn't really handle long filenames. */
+    if (strlen(filename) > 255) {
+        PyErr_SetString(PyExc_ValueError,
+            "filename must not be over 255 bytes long");
+        return -1;
+    }
+
+    /* I'm not entirely sure if you need this, but I do it. */
+    if(!(pkc->filename = strdup(filename))) {
+        PyErr_NoMemory();
+        return -1;
+    }
+
+    if (!ketama_roll(&(pkc->cont), pkc->filename)) {
+        PyErr_SetString(pyketama_error, ketama_error());
+        return -1;
+    }
+
+    return 0;
+}
+
+static PyObject *pyketama_Continuum_repr(PyObject *o) {
+    PyObject *r;
+
+    r = PyString_FromFormat("<%s from ", o->ob_type->tp_name);
+    PyString_Concat(&r,PyObject_Repr(
+        PyString_FromString(((pyketama_Continuum* )o)->filename)));
+    if (r) {
+        PyString_Concat(&r, PyString_FromString(">"));
+    }
+
+    /* Example: <ketama.Continuum from '/tmp/slist'> */
+    return r;
+}
+
+PY_DEF(pyketama_Continuum_get_server, self, args) {
+    char *key;
+    mcs *r;
+    PyObject *ret = NULL;
+
+    if (PyArg_ParseTuple(args, "s", &key)) {
+        /* ketama_get_server simply can not fail, so there's no point in
+         * error checking.
+         */
+        r = ketama_get_server(key, ((pyketama_Continuum *)self)->cont);
+        ret = Py_BuildValue("Is", r->point, r->ip);
+    }
+
+    return ret;
+}
+
+PY_DEF(pyketama_Continuum_get_points, self, args) {
+    PyObject *ret = NULL;
+    pyketama_Continuum *pkc = (pyketama_Continuum *)self;
+
+    if (pkc->cont->array) {
+        int i;
+        mcs (*mcsarr)[pkc->cont->numpoints] = pkc->cont->array;
+
+        ret = PyList_New(pkc->cont->numpoints);
+        for (i = 0; i < pkc->cont->numpoints; i++) {
+            PyList_SET_ITEM(ret, i,
+                Py_BuildValue("Is", (*mcsarr)[i].point, (*mcsarr)[i].ip));
+        }
+    }
+
+    return ret;
+}
+
+/* }}} Continuum type definition */
+
+PY_DEF(pyketama_hashi, self, args) {
+    char *data;
+    PyObject *r = NULL;
+
+    if (PyArg_ParseTuple(args, "s", &data)) {
+        r = Py_BuildValue("I", ketama_hashi(data));
+    }
+}
+
+PyMODINIT_FUNC initketama(void) {
+    PyObject *m;
+
+    if (PyType_Ready(&pyketama_ContinuumType) < 0) {
+        return;
+    }
+
+    if (!(m = Py_InitModule3("ketama", ketamaMethods,
+        "Python extension for calling libketama functions."))) {
+        return;
+    }
+
+    pyketama_error = PyErr_NewException("ketama.KetamaError", NULL, NULL);
+
+    Py_INCREF(pyketama_error);
+    PyModule_AddObject(m, "KetamaError", pyketama_error);
+
+    Py_INCREF(&pyketama_ContinuumType);
+    PyModule_AddObject(m, "Continuum", (PyObject *)&pyketama_ContinuumType);
+}
+
+/* vim: ts=4 sts=4 expandtab
+ */
diff -uN python-ketama/ketamamodule.h ketama-dev-toxik/python-ketama/ketamamodule.h
--- python-ketama/ketamamodule.h	1970-01-01 01:00:00.000000000 +0100
+++ ketama-dev-toxik/python-ketama/ketamamodule.h	2007-08-03 15:00:49.000000000 +0200
@@ -0,0 +1,136 @@
+/**
+ * $Id: ketamamodule.h 23 2007-07-13 01:32:00Z toxik $
+ *
+ * License: See ../LICENSE or
+ *  svn://svn.audioscrobbler.net/misc/ketama/LICENSE
+ */
+
+#ifndef _PYKETAMA_H
+#define _PYKETAMA_H
+
+#include <Python.h>
+#include <ketama.h>
+
+/* Common idiom goes to macro, that's it. */
+#define PY_DEF(name, self, args) static PyObject *(name)( \
+    PyObject *(self), PyObject *(args))
+#define PY_KDEF(name, self, args, kwds) static PyObject *(name)( \
+    PyObject *(self), PyObject *(args) PyObject *(kwds))
+
+PyObject *pyketama_error;
+
+/* {{{ Continuum def */
+
+typedef struct {
+    PyObject_HEAD
+    ketama_continuum cont;
+    char *filename;
+} pyketama_Continuum;
+
+static void pyketama_Continuum_dealloc(pyketama_Continuum *self);
+PyObject * pyketama_Continuum_new(PyTypeObject *type,
+        PyObject *args, PyObject *kwds);
+static int pyketama_Continuum_init(PyObject *self, PyObject *args,
+        PyObject *kwds);
+static PyObject *pyketama_Continuum_repr(PyObject *o);
+
+PY_DEF(pyketama_Continuum_get_server, self, args);
+PY_DEF(pyketama_Continuum_get_points, self, args);
+
+/* get_server could use METH_O instead of METH_VARARGS, but ParseTuple is
+ * a lot more flexible somehow.
+ */
+static PyMethodDef pyketama_Continuum_methods[] = {
+    {"get_server", pyketama_Continuum_get_server, METH_VARARGS,
+     "Return a tuple containing point on circle and address where hash is."},
+    {"get_points", pyketama_Continuum_get_points, METH_NOARGS,
+     "Return a list with all points and associated server."},
+    {NULL}
+};
+
+/* See http://docs.python.org/api/type-structs.html for more information
+ * regarding the struct's members.
+ */
+static PyTypeObject pyketama_ContinuumType = {
+    PyObject_HEAD_INIT(NULL)
+    0,
+    "ketama.Continuum",                     /* tp_name */
+    sizeof(pyketama_Continuum),             /* tp_basicsize */
+    0,                                      /* tp_itemsize */
+
+    /* Methods to implement standard operations */
+    (destructor)pyketama_Continuum_dealloc, /* tp_dealloc */
+    0,                                      /* tp_print */
+    0,                                      /* tp_getattr */
+    0,                                      /* tp_setattr */
+    0,                                      /* tp_compare */
+    (reprfunc)pyketama_Continuum_repr,      /* tp_repr */
+
+    /* Method suites for standard classes */
+    0,                                      /* tp_as_number */
+    0,                                      /* tp_as_sequence */
+    0,                                      /* tp_as_mapping */
+
+    /* More standard operations (here for binary compatibility) */
+    0,                                      /* tp_hash */
+    0,                                      /* tp_call */
+    0,                                      /* tp_str */
+    0,                                      /* tp_getattro */
+    0,                                      /* tp_setattro */
+
+    /* Functions to access object as input/output buffer */
+    0,                                      /* tp_as_buffer */
+
+    /* Flags to define presence of optional/expanded features */
+    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE,
+
+    /* Documentation string */
+    "Ketama continuum type",
+
+    0,                                      /* tp_traverse */
+    0,                                      /* tp_clear */
+    0,                                      /* tp_richcompare */
+    0,                                      /* tp_weaklistoffset */
+
+    /* Iterator API */
+    0,                                      /* tp_iter */
+    0,                                      /* tp_iternext */
+
+    /* Attribute descriptor and subclassing stuff */
+    pyketama_Continuum_methods,             /* tp_methods */
+    0,                                      /* tp_members */
+    0,                                      /* tp_getset */
+    0,                                      /* tp_base */
+    0,                                      /* tp_dict */
+    0,                                      /* tp_descr_get */
+    0,                                      /* tp_descr_set */
+    0,                                      /* tp_dictoffset */
+    (initproc)pyketama_Continuum_init,      /* tp_init */
+    0,                                      /* tp_alloc */
+    pyketama_Continuum_new,                 /* tp_new */
+    0,                                      /* tp_free */
+    0,                                      /* tp_is_gc */
+    0,                                      /* tp_bases */
+    0,                                      /* tp_mro */
+    0,                                      /* tp_cache */
+    0,                                      /* tp_subclasses */
+    0,                                      /* tp_weaklist */
+};
+
+/* }}} Continuum def */
+
+PY_DEF(pyketama_hashi, self, args);
+
+/* See comment at the pyketama_Continuum_methods definition.
+ */
+static PyMethodDef ketamaMethods[] = {
+    {"hashi", pyketama_hashi, METH_VARARGS, "Calculates hash from input key"},
+    {NULL}
+};
+
+PyMODINIT_FUNC initketama(void);
+
+#endif
+
+/* vim: ts=4 sts=4 expandtab
+ */
diff -uN python-ketama/setup.py ketama-dev-toxik/python-ketama/setup.py
--- python-ketama/setup.py	1970-01-01 01:00:00.000000000 +0100
+++ ketama-dev-toxik/python-ketama/setup.py	2007-08-03 14:42:09.000000000 +0200
@@ -0,0 +1,4 @@
+from distutils.core import setup, Extension
+
+setup(name="ketama", version="0.1",
+    ext_modules=[Extension("ketama", ["ketamamodule.c"], library_dirs=["/usr/local/lib"], libraries=["ketama"])])
Common subdirectories: python-ketama/.svn and ketama-dev-toxik/python-ketama/.svn
diff -uN python-ketama/tests.py ketama-dev-toxik/python-ketama/tests.py
--- python-ketama/tests.py	1970-01-01 01:00:00.000000000 +0100
+++ ketama-dev-toxik/python-ketama/tests.py	2007-08-03 14:42:09.000000000 +0200
@@ -0,0 +1,49 @@
+import ketama
+import unittest
+import os
+
+class KetamaTest(unittest.TestCase):
+    
+    def setUp(self):
+        self.valid_list_file = os.tmpnam()
+        self.valid_list = file(self.valid_list_file, "w")
+        self.valid_list.write("127.0.0.1:11211\t600\n")
+        self.valid_list.write("127.0.0.1:11212\t400\n")
+        self.valid_list.flush()
+        self.invalid_list_file = os.tmpnam()
+        self.invalid_list = file(self.invalid_list_file, "w")
+        self.invalid_list.write("127.0.0.1:11211 600\n")
+        self.invalid_list.write("127.0.0.1:11212 two\n")
+        self.invalid_list.flush()
+
+    def tearDown(self):
+        self.valid_list.close()
+        os.unlink(self.valid_list_file)
+        self.invalid_list.close()
+        os.unlink(self.invalid_list_file)
+
+    def test_valid(self):
+        cont = ketama.Continuum(self.valid_list_file)
+        self.assertEqual(type(cont), ketama.Continuum)
+
+    def test_invalid_null(self):
+        self.assertRaises(ketama.KetamaError, ketama.Continuum, "/dev/null")
+
+    def test_invalid_data(self):
+        self.assertRaises(ketama.KetamaError, ketama.Continuum,
+            self.invalid_list_file)
+
+    def test_hashing(self):
+        cont = ketama.Continuum(self.valid_list_file)
+        self.assertEqual(cont.get_server("test"),
+            (3454255383L, '127.0.0.1:11211'))
+
+    def test_hashi(self):
+        self.assertEqual(ketama.hashi("test"), 3446378249L)
+
+    def test_points(self):
+        cont = ketama.Continuum(self.valid_list_file)
+        self.assertEqual(len(cont.get_points()), 160 * 2)
+
+if __name__ == "__main__":
+    unittest.main()

